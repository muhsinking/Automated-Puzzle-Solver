{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12080\viewh9900\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Puzzle Solver\
\
- Load an image\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 = Isolate puzzle pieces =
\b0 \
- k-means: - \
	- Create dataset of all non-white pixels\
	- Perform k-means (k is the number of pieces) \
	- Output is a list of lists containing pixels in each piece \
\

\b = Create an image for each puzzle piece list = 
\b0 \
- for each puzzle piece list:\
	- determine min/max x/y values, create square image with these dimensions\
	- "paste" puzzle piece pixels into this image \
\

\b = Find/record contours =
\b0 \
- for each puzzle piece image:\
	- find contours (possibly through openCV contours())\
	- record contour points in list \
- Sort contour list by adjacency\
	- Add all pixels in list to unsorted list\
	- Select arbitrary starting pixel, move to sorted list\
	- Find nearest pixel by euclidean distance, move to sorted list\
	- Repeat until unsorted list is empty \
\

\b =  Convert contour pixel list to angle representation =\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 - for every n pixels (must be >1 to allow for actual angles- not just 90 or 180):\
	- using a "rolling window" of 3 pixels at a time, compute angle between them\
	- Store result in list\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 = Break each contour angle list into individual edges =\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 - Look for large angles (~270) in angle list\
- Record angles "in between" these edges, save as separate lists }